{"ast":null,"code":"// import { google } from 'googleapis'; // No usaremos la librería de Node.js en el frontend\n// import { authenticate } from '@google-cloud/local-auth'; // No usar en frontend\n// import path from 'path'; // No usar en frontend\n// import { Buffer } from 'buffer'; // No necesario si no manipulas buffers directamente aquí\n// import { config } from '../config/google'; // Asegúrate que este archivo solo contenga SPREADSHEET_ID\n\n// Solo necesitamos el ID de la hoja desde la configuración\nimport { SPREADSHEET_ID, API_KEY } from '../config/google'; // Asumiendo que google.js exporta SPREADSHEET_ID\n\nconst SHEETS_API_URL = 'https://sheets.googleapis.com/v4/spreadsheets';\nclass SheetsService {\n  constructor() {\n    this.accessToken = null;\n    this.spreadsheetId = SPREADSHEET_ID;\n    this.apiKey = API_KEY;\n  }\n\n  // Método para inicializar el servicio con el token\n  init(accessToken) {\n    if (!accessToken) {\n      console.error('SheetsService: Se requiere Access Token para inicializar.');\n      return false;\n    }\n    this.accessToken = accessToken;\n    console.log('SheetsService inicializado con Access Token.');\n    return true;\n  }\n  isInitialized() {\n    return !!this.accessToken;\n  }\n\n  // Método para añadir una fila de datos\n  async addRecord(sheetName, values) {\n    if (!this.isInitialized()) {\n      throw new Error('SheetsService: El servicio no está inicializado.');\n    }\n    const range = `${sheetName}!A:A`; // Usar A:A para que se añada al final\n    const valueInputOption = 'USER_ENTERED';\n    const insertDataOption = 'INSERT_ROWS';\n    const body = {\n      values: [values],\n      majorDimension: 'ROWS'\n    };\n    try {\n      const response = await fetch(`${SHEETS_API_URL}/${this.spreadsheetId}/values/${range}:append?valueInputOption=${valueInputOption}&insertDataOption=${insertDataOption}&key=${this.apiKey}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n      if (!response.ok) {\n        var _errorData$error;\n        const errorData = await response.json();\n        throw new Error(`Error al guardar: ${((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error en addRecord:', error);\n      throw error;\n    }\n  }\n\n  // Puedes añadir más métodos aquí (getRecords, updateRecord, etc.)\n  // Ejemplo básico para obtener datos:\n  async getRecords(sheetName, range = 'A1:Z1000') {\n    // Rango por defecto amplio\n    if (!this.isInitialized()) {\n      console.error('SheetsService: El servicio no está inicializado.');\n      return null;\n    }\n    if (!sheetName) {\n      console.error('SheetsService: Nombre de hoja requerido para getRecords.');\n      return null;\n    }\n    const fullRange = `${sheetName}!${range}`;\n    try {\n      const response = await fetch(`${SHEETS_API_URL}/${this.spreadsheetId}/values/${encodeURIComponent(fullRange)}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`\n        }\n      });\n      if (!response.ok) {\n        var _errorData$error2;\n        const errorData = await response.json();\n        console.error('Sheets API Error:', errorData);\n        throw new Error(`Error al obtener registros: ${((_errorData$error2 = errorData.error) === null || _errorData$error2 === void 0 ? void 0 : _errorData$error2.message) || response.statusText}`);\n      }\n      const result = await response.json();\n      console.log('Registros obtenidos:', result.values);\n      return result.values || []; // Devuelve las filas o un array vacío\n    } catch (error) {\n      console.error('Error en getRecords:', error);\n      return null;\n    }\n  }\n}\n\n// Exportar una instancia única (singleton)\nexport const sheetsService = new SheetsService();","map":{"version":3,"names":["SPREADSHEET_ID","API_KEY","SHEETS_API_URL","SheetsService","constructor","accessToken","spreadsheetId","apiKey","init","console","error","log","isInitialized","addRecord","sheetName","values","Error","range","valueInputOption","insertDataOption","body","majorDimension","response","fetch","method","headers","JSON","stringify","ok","_errorData$error","errorData","json","message","statusText","getRecords","fullRange","encodeURIComponent","_errorData$error2","result","sheetsService"],"sources":["E:/TRABAJOS NUEVOS/RIALTO PATROL/project/src/services/sheetsService.js"],"sourcesContent":["// import { google } from 'googleapis'; // No usaremos la librería de Node.js en el frontend\r\n// import { authenticate } from '@google-cloud/local-auth'; // No usar en frontend\r\n// import path from 'path'; // No usar en frontend\r\n// import { Buffer } from 'buffer'; // No necesario si no manipulas buffers directamente aquí\r\n// import { config } from '../config/google'; // Asegúrate que este archivo solo contenga SPREADSHEET_ID\r\n\r\n// Solo necesitamos el ID de la hoja desde la configuración\r\nimport { SPREADSHEET_ID, API_KEY } from '../config/google'; // Asumiendo que google.js exporta SPREADSHEET_ID\r\n\r\nconst SHEETS_API_URL = 'https://sheets.googleapis.com/v4/spreadsheets';\r\n\r\nclass SheetsService {\r\n  constructor() {\r\n    this.accessToken = null;\r\n    this.spreadsheetId = SPREADSHEET_ID;\r\n    this.apiKey = API_KEY;\r\n  }\r\n\r\n  // Método para inicializar el servicio con el token\r\n  init(accessToken) {\r\n    if (!accessToken) {\r\n      console.error('SheetsService: Se requiere Access Token para inicializar.');\r\n      return false;\r\n    }\r\n    this.accessToken = accessToken;\r\n    console.log('SheetsService inicializado con Access Token.');\r\n    return true;\r\n  }\r\n\r\n  isInitialized() {\r\n    return !!this.accessToken;\r\n  }\r\n\r\n  // Método para añadir una fila de datos\r\n  async addRecord(sheetName, values) {\r\n    if (!this.isInitialized()) {\r\n      throw new Error('SheetsService: El servicio no está inicializado.');\r\n    }\r\n\r\n    const range = `${sheetName}!A:A`; // Usar A:A para que se añada al final\r\n    const valueInputOption = 'USER_ENTERED';\r\n    const insertDataOption = 'INSERT_ROWS';\r\n\r\n    const body = {\r\n      values: [values],\r\n      majorDimension: 'ROWS'\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `${SHEETS_API_URL}/${this.spreadsheetId}/values/${range}:append?valueInputOption=${valueInputOption}&insertDataOption=${insertDataOption}&key=${this.apiKey}`,\r\n        {\r\n          method: 'POST',\r\n          headers: {\r\n            'Authorization': `Bearer ${this.accessToken}`,\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(body)\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(`Error al guardar: ${errorData.error?.message || response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error en addRecord:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Puedes añadir más métodos aquí (getRecords, updateRecord, etc.)\r\n  // Ejemplo básico para obtener datos:\r\n  async getRecords(sheetName, range = 'A1:Z1000') { // Rango por defecto amplio\r\n     if (!this.isInitialized()) {\r\n       console.error('SheetsService: El servicio no está inicializado.');\r\n       return null;\r\n     }\r\n     if (!sheetName) {\r\n       console.error('SheetsService: Nombre de hoja requerido para getRecords.');\r\n       return null;\r\n     }\r\n\r\n     const fullRange = `${sheetName}!${range}`;\r\n\r\n     try {\r\n       const response = await fetch(\r\n         `${SHEETS_API_URL}/${this.spreadsheetId}/values/${encodeURIComponent(fullRange)}`,\r\n         {\r\n           method: 'GET',\r\n           headers: {\r\n             'Authorization': `Bearer ${this.accessToken}`,\r\n           },\r\n         }\r\n       );\r\n\r\n       if (!response.ok) {\r\n         const errorData = await response.json();\r\n         console.error('Sheets API Error:', errorData);\r\n         throw new Error(`Error al obtener registros: ${errorData.error?.message || response.statusText}`);\r\n       }\r\n\r\n       const result = await response.json();\r\n       console.log('Registros obtenidos:', result.values);\r\n       return result.values || []; // Devuelve las filas o un array vacío\r\n\r\n     } catch (error) {\r\n       console.error('Error en getRecords:', error);\r\n       return null;\r\n     }\r\n   }\r\n\r\n}\r\n\r\n// Exportar una instancia única (singleton)\r\nexport const sheetsService = new SheetsService();"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAASA,cAAc,EAAEC,OAAO,QAAQ,kBAAkB,CAAC,CAAC;;AAE5D,MAAMC,cAAc,GAAG,+CAA+C;AAEtE,MAAMC,aAAa,CAAC;EAClBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,aAAa,GAAGN,cAAc;IACnC,IAAI,CAACO,MAAM,GAAGN,OAAO;EACvB;;EAEA;EACAO,IAAIA,CAACH,WAAW,EAAE;IAChB,IAAI,CAACA,WAAW,EAAE;MAChBI,OAAO,CAACC,KAAK,CAAC,2DAA2D,CAAC;MAC1E,OAAO,KAAK;IACd;IACA,IAAI,CAACL,WAAW,GAAGA,WAAW;IAC9BI,OAAO,CAACE,GAAG,CAAC,8CAA8C,CAAC;IAC3D,OAAO,IAAI;EACb;EAEAC,aAAaA,CAAA,EAAG;IACd,OAAO,CAAC,CAAC,IAAI,CAACP,WAAW;EAC3B;;EAEA;EACA,MAAMQ,SAASA,CAACC,SAAS,EAAEC,MAAM,EAAE;IACjC,IAAI,CAAC,IAAI,CAACH,aAAa,CAAC,CAAC,EAAE;MACzB,MAAM,IAAII,KAAK,CAAC,kDAAkD,CAAC;IACrE;IAEA,MAAMC,KAAK,GAAG,GAAGH,SAAS,MAAM,CAAC,CAAC;IAClC,MAAMI,gBAAgB,GAAG,cAAc;IACvC,MAAMC,gBAAgB,GAAG,aAAa;IAEtC,MAAMC,IAAI,GAAG;MACXL,MAAM,EAAE,CAACA,MAAM,CAAC;MAChBM,cAAc,EAAE;IAClB,CAAC;IAED,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAGrB,cAAc,IAAI,IAAI,CAACI,aAAa,WAAWW,KAAK,4BAA4BC,gBAAgB,qBAAqBC,gBAAgB,QAAQ,IAAI,CAACZ,MAAM,EAAE,EAC7J;QACEiB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,eAAe,EAAE,UAAU,IAAI,CAACpB,WAAW,EAAE;UAC7C,cAAc,EAAE;QAClB,CAAC;QACDe,IAAI,EAAEM,IAAI,CAACC,SAAS,CAACP,IAAI;MAC3B,CACF,CAAC;MAED,IAAI,CAACE,QAAQ,CAACM,EAAE,EAAE;QAAA,IAAAC,gBAAA;QAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIf,KAAK,CAAC,qBAAqB,EAAAa,gBAAA,GAAAC,SAAS,CAACpB,KAAK,cAAAmB,gBAAA,uBAAfA,gBAAA,CAAiBG,OAAO,KAAIV,QAAQ,CAACW,UAAU,EAAE,CAAC;MACzF;MAEA,OAAO,MAAMX,QAAQ,CAACS,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOrB,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA;EACA,MAAMwB,UAAUA,CAACpB,SAAS,EAAEG,KAAK,GAAG,UAAU,EAAE;IAAE;IAC/C,IAAI,CAAC,IAAI,CAACL,aAAa,CAAC,CAAC,EAAE;MACzBH,OAAO,CAACC,KAAK,CAAC,kDAAkD,CAAC;MACjE,OAAO,IAAI;IACb;IACA,IAAI,CAACI,SAAS,EAAE;MACdL,OAAO,CAACC,KAAK,CAAC,0DAA0D,CAAC;MACzE,OAAO,IAAI;IACb;IAEA,MAAMyB,SAAS,GAAG,GAAGrB,SAAS,IAAIG,KAAK,EAAE;IAEzC,IAAI;MACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAGrB,cAAc,IAAI,IAAI,CAACI,aAAa,WAAW8B,kBAAkB,CAACD,SAAS,CAAC,EAAE,EACjF;QACEX,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,eAAe,EAAE,UAAU,IAAI,CAACpB,WAAW;QAC7C;MACF,CACF,CAAC;MAED,IAAI,CAACiB,QAAQ,CAACM,EAAE,EAAE;QAAA,IAAAS,iBAAA;QAChB,MAAMP,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QACvCtB,OAAO,CAACC,KAAK,CAAC,mBAAmB,EAAEoB,SAAS,CAAC;QAC7C,MAAM,IAAId,KAAK,CAAC,+BAA+B,EAAAqB,iBAAA,GAAAP,SAAS,CAACpB,KAAK,cAAA2B,iBAAA,uBAAfA,iBAAA,CAAiBL,OAAO,KAAIV,QAAQ,CAACW,UAAU,EAAE,CAAC;MACnG;MAEA,MAAMK,MAAM,GAAG,MAAMhB,QAAQ,CAACS,IAAI,CAAC,CAAC;MACpCtB,OAAO,CAACE,GAAG,CAAC,sBAAsB,EAAE2B,MAAM,CAACvB,MAAM,CAAC;MAClD,OAAOuB,MAAM,CAACvB,MAAM,IAAI,EAAE,CAAC,CAAC;IAE9B,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO,IAAI;IACb;EACF;AAEH;;AAEA;AACA,OAAO,MAAM6B,aAAa,GAAG,IAAIpC,aAAa,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}