{"ast":null,"code":"// import { google } from 'googleapis'; // No usaremos la librería de Node.js en el frontend\n// import { authenticate } from '@google-cloud/local-auth'; // No usar en frontend\n// import path from 'path'; // No usar en frontend\n// import { Buffer } from 'buffer'; // No necesario si no manipulas buffers directamente aquí\n// import { config } from '../config/google'; // Asegúrate que este archivo solo contenga SPREADSHEET_ID\n// Solo necesitamos el ID de la hoja desde la configuración\nimport{SPREADSHEET_ID,API_KEY}from'../config/google';// Asumiendo que google.js exporta SPREADSHEET_ID\nconst SHEETS_API_URL='https://sheets.googleapis.com/v4/spreadsheets';class SheetsService{constructor(){this.accessToken='AIzaSyAgLNdE8AzuxsQL4hzKg94Z65cFuNWTQfo';// Tu API Key real\nthis.spreadsheetId='18p6GZI13OgUssecIH21PjPvApTAa9VOWnEHGYfp9EEs';console.log('SheetsService inicializado correctamente');}async init(){try{await gapi.client.init({apiKey:this.apiKey,discoveryDocs:['https://sheets.googleapis.com/$discovery/rest?version=v4'],scope:'https://www.googleapis.com/auth/spreadsheets'});return true;}catch(error){console.error('Error al inicializar SheetsService:',error);return false;}}// Método para inicializar el servicio con el token\ninit(accessToken){if(!accessToken){console.error('SheetsService: Se requiere Access Token para inicializar.');return false;}this.accessToken=accessToken;console.log('SheetsService inicializado con Access Token.');return true;}isInitialized(){return!!this.accessToken;}// Método para añadir una fila de datos\nasync addRecord(sheetName,values){if(!this.isInitialized()){throw new Error('SheetsService: El servicio no está inicializado.');}const range=`${sheetName}!A:A`;// Usar A:A para que se añada al final\nconst valueInputOption='USER_ENTERED';const insertDataOption='INSERT_ROWS';const body={values:[values],majorDimension:'ROWS'};try{const response=await fetch(`${SHEETS_API_URL}/${this.spreadsheetId}/values/${range}:append?valueInputOption=${valueInputOption}&insertDataOption=${insertDataOption}&key=${this.apiKey}`,{method:'POST',headers:{'Authorization':`Bearer ${this.accessToken}`,'Content-Type':'application/json'},body:JSON.stringify(body)});if(!response.ok){var _errorData$error;const errorData=await response.json();throw new Error(`Error al guardar: ${((_errorData$error=errorData.error)===null||_errorData$error===void 0?void 0:_errorData$error.message)||response.statusText}`);}return await response.json();}catch(error){console.error('Error en addRecord:',error);throw error;}}// Puedes añadir más métodos aquí (getRecords, updateRecord, etc.)\n// Ejemplo básico para obtener datos:\nasync getRecords(sheetName){let range=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'A1:Z1000';// Rango por defecto amplio\nif(!this.isInitialized()){console.error('SheetsService: El servicio no está inicializado.');return null;}if(!sheetName){console.error('SheetsService: Nombre de hoja requerido para getRecords.');return null;}const fullRange=`${sheetName}!${range}`;try{const response=await fetch(`${SHEETS_API_URL}/${this.spreadsheetId}/values/${encodeURIComponent(fullRange)}`,{method:'GET',headers:{'Authorization':`Bearer ${this.accessToken}`}});if(!response.ok){var _errorData$error2;const errorData=await response.json();console.error('Sheets API Error:',errorData);throw new Error(`Error al obtener registros: ${((_errorData$error2=errorData.error)===null||_errorData$error2===void 0?void 0:_errorData$error2.message)||response.statusText}`);}const result=await response.json();console.log('Registros obtenidos:',result.values);return result.values||[];// Devuelve las filas o un array vacío\n}catch(error){console.error('Error en getRecords:',error);return null;}}}// Exportar una instancia única (singleton)\nexport const sheetsService=new SheetsService();const initSheet=async(sheetName,headers)=>{try{const response=await gapi.client.sheets.spreadsheets.get({spreadsheetId:SPREADSHEET_ID});const sheetExists=response.data.sheets.some(sheet=>sheet.properties.title===sheetName);if(!sheetExists){await gapi.client.sheets.spreadsheets.batchUpdate({spreadsheetId:SPREADSHEET_ID,resource:{requests:[{addSheet:{properties:{title:sheetName,gridProperties:{rowCount:1000,columnCount:headers.length}}}}]}});// Agregar encabezados\nawait gapi.client.sheets.spreadsheets.values.update({spreadsheetId:SPREADSHEET_ID,range:`${sheetName}!A1:${String.fromCharCode(64+headers.length)}1`,valueInputOption:'RAW',resource:{values:[headers]}});}return true;}catch(error){console.error('Error al inicializar hoja:',error);return false;}};const init=async accessToken=>{try{await gapi.client.init({'apiKey':API_KEY,'discoveryDocs':DISCOVERY_DOCS,'clientId':CLIENT_ID,'scope':SCOPES});// Inicializar las hojas necesarias con sus columnas\nawait initSheet('Incidentes',['Fecha','Tipo','Descripción','Latitud','Longitud','Estado','Asignado a','Comentarios']);await initSheet('Guardias',['ID','Nombre','Apellido','Teléfono','Email','Turno','Zona Asignada']);await initSheet('Zonas',['ID','Nombre','Descripción','Latitud','Longitud','Radio (m)']);// Establecer el accessToken\nthis.accessToken=accessToken;return true;}catch(error){console.error('Error al inicializar SheetsService:',error);return false;}};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}