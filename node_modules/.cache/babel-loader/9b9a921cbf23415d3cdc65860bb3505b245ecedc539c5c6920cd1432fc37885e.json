{"ast":null,"code":"// import { google } from 'googleapis'; // No usaremos la librería de Node.js en el frontend\n// import { authenticate } from '@google-cloud/local-auth'; // No usar en frontend\n// import path from 'path'; // No usar en frontend\n// import { Buffer } from 'buffer'; // No necesario si no manipulas buffers directamente aquí\n// import { config } from '../config/google'; // Asegúrate que este archivo solo contenga SPREADSHEET_ID\n// Solo necesitamos el ID de la hoja desde la configuración\nimport{SPREADSHEET_ID,API_KEY}from'../config/google';// Asumiendo que google.js exporta SPREADSHEET_ID\nconst SHEETS_API_URL='https://sheets.googleapis.com/v4/spreadsheets';class SheetsService{constructor(){this.accessToken=null;this.spreadsheetId=SPREADSHEET_ID;this.apiKey=API_KEY;}// Método para inicializar el servicio con el token\ninit(accessToken){if(!accessToken){console.error('SheetsService: Se requiere Access Token para inicializar.');return false;}this.accessToken=accessToken;console.log('SheetsService inicializado con Access Token.');return true;}isInitialized(){return!!this.accessToken;}// Método para añadir una fila de datos\nasync addRecord(sheetName,values){if(!this.isInitialized()){throw new Error('SheetsService: El servicio no está inicializado.');}const range=`${sheetName}!A:A`;// Usar A:A para que se añada al final\nconst valueInputOption='USER_ENTERED';const insertDataOption='INSERT_ROWS';const body={values:[values],majorDimension:'ROWS'};try{const response=await fetch(`${SHEETS_API_URL}/${this.spreadsheetId}/values/${range}:append?valueInputOption=${valueInputOption}&insertDataOption=${insertDataOption}&key=${this.apiKey}`,{method:'POST',headers:{'Authorization':`Bearer ${this.accessToken}`,'Content-Type':'application/json'},body:JSON.stringify(body)});if(!response.ok){var _errorData$error;const errorData=await response.json();throw new Error(`Error al guardar: ${((_errorData$error=errorData.error)===null||_errorData$error===void 0?void 0:_errorData$error.message)||response.statusText}`);}return await response.json();}catch(error){console.error('Error en addRecord:',error);throw error;}}// Puedes añadir más métodos aquí (getRecords, updateRecord, etc.)\n// Ejemplo básico para obtener datos:\nasync getRecords(sheetName){let range=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'A1:Z1000';// Rango por defecto amplio\nif(!this.isInitialized()){console.error('SheetsService: El servicio no está inicializado.');return null;}if(!sheetName){console.error('SheetsService: Nombre de hoja requerido para getRecords.');return null;}const fullRange=`${sheetName}!${range}`;try{const response=await fetch(`${SHEETS_API_URL}/${this.spreadsheetId}/values/${encodeURIComponent(fullRange)}`,{method:'GET',headers:{'Authorization':`Bearer ${this.accessToken}`}});if(!response.ok){var _errorData$error2;const errorData=await response.json();console.error('Sheets API Error:',errorData);throw new Error(`Error al obtener registros: ${((_errorData$error2=errorData.error)===null||_errorData$error2===void 0?void 0:_errorData$error2.message)||response.statusText}`);}const result=await response.json();console.log('Registros obtenidos:',result.values);return result.values||[];// Devuelve las filas o un array vacío\n}catch(error){console.error('Error en getRecords:',error);return null;}}}// Exportar una instancia única (singleton)\nexport const sheetsService=new SheetsService();","map":{"version":3,"names":["SPREADSHEET_ID","API_KEY","SHEETS_API_URL","SheetsService","constructor","accessToken","spreadsheetId","apiKey","init","console","error","log","isInitialized","addRecord","sheetName","values","Error","range","valueInputOption","insertDataOption","body","majorDimension","response","fetch","method","headers","JSON","stringify","ok","_errorData$error","errorData","json","message","statusText","getRecords","arguments","length","undefined","fullRange","encodeURIComponent","_errorData$error2","result","sheetsService"],"sources":["E:/TRABAJOS NUEVOS/RIALTO PATROL/project/src/services/sheetsService.js"],"sourcesContent":["// import { google } from 'googleapis'; // No usaremos la librería de Node.js en el frontend\r\n// import { authenticate } from '@google-cloud/local-auth'; // No usar en frontend\r\n// import path from 'path'; // No usar en frontend\r\n// import { Buffer } from 'buffer'; // No necesario si no manipulas buffers directamente aquí\r\n// import { config } from '../config/google'; // Asegúrate que este archivo solo contenga SPREADSHEET_ID\r\n\r\n// Solo necesitamos el ID de la hoja desde la configuración\r\nimport { SPREADSHEET_ID, API_KEY } from '../config/google'; // Asumiendo que google.js exporta SPREADSHEET_ID\r\n\r\nconst SHEETS_API_URL = 'https://sheets.googleapis.com/v4/spreadsheets';\r\n\r\nclass SheetsService {\r\n  constructor() {\r\n    this.accessToken = null;\r\n    this.spreadsheetId = SPREADSHEET_ID;\r\n    this.apiKey = API_KEY;\r\n  }\r\n\r\n  // Método para inicializar el servicio con el token\r\n  init(accessToken) {\r\n    if (!accessToken) {\r\n      console.error('SheetsService: Se requiere Access Token para inicializar.');\r\n      return false;\r\n    }\r\n    this.accessToken = accessToken;\r\n    console.log('SheetsService inicializado con Access Token.');\r\n    return true;\r\n  }\r\n\r\n  isInitialized() {\r\n    return !!this.accessToken;\r\n  }\r\n\r\n  // Método para añadir una fila de datos\r\n  async addRecord(sheetName, values) {\r\n    if (!this.isInitialized()) {\r\n      throw new Error('SheetsService: El servicio no está inicializado.');\r\n    }\r\n\r\n    const range = `${sheetName}!A:A`; // Usar A:A para que se añada al final\r\n    const valueInputOption = 'USER_ENTERED';\r\n    const insertDataOption = 'INSERT_ROWS';\r\n\r\n    const body = {\r\n      values: [values],\r\n      majorDimension: 'ROWS'\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `${SHEETS_API_URL}/${this.spreadsheetId}/values/${range}:append?valueInputOption=${valueInputOption}&insertDataOption=${insertDataOption}&key=${this.apiKey}`,\r\n        {\r\n          method: 'POST',\r\n          headers: {\r\n            'Authorization': `Bearer ${this.accessToken}`,\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(body)\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(`Error al guardar: ${errorData.error?.message || response.statusText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error en addRecord:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Puedes añadir más métodos aquí (getRecords, updateRecord, etc.)\r\n  // Ejemplo básico para obtener datos:\r\n  async getRecords(sheetName, range = 'A1:Z1000') { // Rango por defecto amplio\r\n     if (!this.isInitialized()) {\r\n       console.error('SheetsService: El servicio no está inicializado.');\r\n       return null;\r\n     }\r\n     if (!sheetName) {\r\n       console.error('SheetsService: Nombre de hoja requerido para getRecords.');\r\n       return null;\r\n     }\r\n\r\n     const fullRange = `${sheetName}!${range}`;\r\n\r\n     try {\r\n       const response = await fetch(\r\n         `${SHEETS_API_URL}/${this.spreadsheetId}/values/${encodeURIComponent(fullRange)}`,\r\n         {\r\n           method: 'GET',\r\n           headers: {\r\n             'Authorization': `Bearer ${this.accessToken}`,\r\n           },\r\n         }\r\n       );\r\n\r\n       if (!response.ok) {\r\n         const errorData = await response.json();\r\n         console.error('Sheets API Error:', errorData);\r\n         throw new Error(`Error al obtener registros: ${errorData.error?.message || response.statusText}`);\r\n       }\r\n\r\n       const result = await response.json();\r\n       console.log('Registros obtenidos:', result.values);\r\n       return result.values || []; // Devuelve las filas o un array vacío\r\n\r\n     } catch (error) {\r\n       console.error('Error en getRecords:', error);\r\n       return null;\r\n     }\r\n   }\r\n\r\n}\r\n\r\n// Exportar una instancia única (singleton)\r\nexport const sheetsService = new SheetsService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}